Requirements
------------
Drupal 6.x, Salesforce.com account, PHP + SOAP enabled, Webform 3.x


Upgrading
------------
Always make sure to run update.php when upgrading the module to a new version

If you are upgrading from the 1.x to the 2.x branch, check to make sure that
the field mappings are maintained.  Users moving from the 1.2->2.0 editions
may have fields that do not remained mapped due to a change in the way
Salesforce Webform handles the mappings.


Installation
------------
1. Copy the salesforcewebform directory to the Drupal modules directory for your site

2. Download the latest version of the Salesforce PHP Toolkit (Version 20.0 at the time of
   writing) from http://wiki.apexdevnet.com/index.php/Web_Services_API#PHP under
   'Toolkits'.

3. Open the zip file from Salesforce and extract the soapclient folder into the 
   salesforcewebform/includes directory.  You should now have the following structure
   under your /modules/ directory: salesforcewebform/includes/soapclient

4. Login as an administrator. Enable the module in the "Administer" -> "Build" -> "Modules"

5. Go to "Administer" -> "site configuration" -> "Salesforce Webform"
  
   In the 'Path to Salesforce PHP Toolkit' textfield,  enter the absolute path to the 
   includes folder under salesforcewebform.  (Most users will be able to use the default,
   but if you experience issues with the toolkit not being found, try entering the absolute
   path here).
   
   The Custom Fields textbox remains as legacy code from the 1.x branch.  Custom fields
   should display directly from Salesforce now.  If not, a field can be added in the format
   Salesforce API Key|Human Readable Name.

   Enter a valid Salesforce username.

   Enter the corresponding password + API Security token, in the form passwordXXXXXXXX,
   where 'password' is the account password and xxxxxxxx is the API Security Token.
   
   Make sure to check the 'Change Login Information' box so that the login information is
   stored in the database.

   Save the configuration.  Note that the password will not display (for security reasons),
   but is stored in the database.

6. In your Salesforce.com screen, add a new custom field 'WebformSID'.  Select that it is
   a Unique Field and an External ID.  It is very important to add this field, as it
   maps each Webform submission to an object in Salesforce, and allows edits of the Webform
   submission to not create a duplicate object; instead, the existing object is updated.

7. Create or edit a webform to match your object form.  Under 'Salesforce Settings', select
   the 'Yes' option to post the form to Salesforce.

   Make sure that, at a minimum, that your webform contains the minimum required fields from
   the Salesforce Account, Contact, or Lead form.
   
   For each component, you must select a Salesforce field to map to.  Fields are grabbed from
   Salesforce on-the-fly, so all fields should be displayed for you.  If a custom field is 
   missing, they can be entered into the "Administer" -> "Site Configuration" -> 
   "Salesforce Webform" screen.

   As the last entry in the Webform, add a hidden field 'SID Key'.  Select 'Webform SID Key'
   as the Salesforce key to map to. 

   Save the webform.

8. As your object form is submitted (either new or edits), it will be posted via SOAP to 
   Salesforce automatically.
