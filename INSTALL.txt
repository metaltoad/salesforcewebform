$Id$
Requirements
------------
Drupal 5.x, SalesForce.com account, PHP + SOAP enabled

Installation
------------
1. Copy the salesforcewebform directory to the Drupal modules directory for your site

2. Download the latest version of the SalesForce PHP Toolkit (Version 11 at the time of
   writing) from http://wiki.apexdevnet.com/index.php/Web_Services_API#PHP under
   'Toolkits'.

3. Unzip the toolkit into the salesforcewebform/includes directory.

4. Login as an administrator. Enable the module in the "Administer" -> "Build" -> "Modules"

5. Go to "Administer" -> "site configuration" -> "SalesForce Webform"

   If you have custom fields defined in your lead form, enter them into the 'Custom Fields'
   box.  Enter in the format key|description.  To find the correct key name, in your
   SalesForce.com page, go to "Setup" -> "App Setup" -> "Customize" -> "Leads" -> "Fields".
   Select the field, and note the "API Field Name".  That is the key you need to list on
   the Custom Fields page.

   Enter a valid SalesForce username.

   Enter the corresponding password + API Security token, in the form passwordXXXXXXXX,
   where 'password' is the account password and xxxxxxxx is the API Security Token.

   Save the configuration.  Note that the password will not display (for security reasons),
   but is stored in the database.  If you change the custom fields, you will need to reenter
   the password + API Security Token.

6. In your SalesForce.com screen, add a new custom field 'WebformSID'.  Select that it is
   a Unique Field and an External ID.  It is very important to add this field, as it
   maps each Webform submission to a lead in SalesForce, and allows edits of the Webform
   submission to not create a duplicate lead; instead, the existing lead is updated.

7. Create or edit a webform to match your lead form.  Under 'SalesForce Settings', select
   the 'Yes' option to post the form to SalesForce.

   Under 'Webform Advanced Settings', add the following code for 'Additional Processing':

	<?php
	require_once(drupal_get_path('module', 'salesforcewebform') . '/salesforcewebform.module');
	$form_values = salesforcewebform_process($form_id, $form_values);
	?>

   For each component, you must select a SalesForce field to map to.  The default fields
   are listed for easy mapping.  Custom fields must be entered into the "Administer" ->
   "Site Configuration" -> "SalesForce Webform" screen.

   As the last entry in the Webform, add a hidden field 'SID Key'.  Select 'Webform SID Key'
   as the SalesForce key to map to.  It is very important that the SID Key be the LAST item in
   the form.

   Save the webform.

8. As your lead form is submitted (either new or edits), it will be posted via SOAP to 
   SalesForce automatically.
