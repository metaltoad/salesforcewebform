<?php 
// $Id$

ini_set("soap.wsdl_cache_enabled", "0");

/**
 * Allow for editing webforms with SalesForce connection information and modifying the
 * each webform to post to SalesForce.
 */
function salesforcewebform_form_alter($form_id, &$form) {

	// handle webform client forms (instances of webforms that are submitted)	
	// webform names client forms with the pattern web_form_client_form_$nid, use this knowledge to
	// manipulate the forms that webform displays
	if ( ereg('^webform_client_form_', $form_id) ) {
		
		global $base_url;
		$node = $form['#parameters'][1];
				
		// only deal with this form if it is supposed to go to SalesForce
		if ( empty($node->use_salesforce) ) {
			return ;
		}
	}
	
	// handle editing of webform nodes
  elseif ( $form_id == 'webform_node_form' ) {		
	
		  /* Collapse the email info on the page assuming that it is going to be a SalesForce form */
		  $form['mailsettings']['#collapsed'] = TRUE;

		  /* Start SalesForce Settings Form */
		  $salesforce_form['salesforcesettings'] = array(
		    '#type' => 'fieldset',
		    '#title' => t('SalesForce Settings'),
		    '#collapsible' => TRUE,
		    '#collapsed' => FALSE,
		    '#weight' => -2,
		  );
		
		  $salesforce_form['salesforcesettings']['use_salesforce'] = array (
			'#type' => 'radios',
			'#title' => t('Submit to SalesForce'),
			'#options' => array(
				1=>t('Yes'), 0=>t('No')
			),
			'#description' => t('If yes, the form will be sent via SOAP to SalesForce.  Make sure you have specified the username & password in Administer->Site Configuration->SalesForce Webform first.'),
			'#default_value' => ($form['#node']->use_salesforce) ? $form['#node']->use_salesforce : 0,
		  );
		  /* End SalesForce settings form */

		  // integrate the SalesForce form into the form
		  $pos = array_search('mailsettings', array_keys($form)) + 1;
		  $form = array_merge(array_slice($form, 0, $pos), $salesforce_form, array_slice($form, $pos));
	
	}
		
	// handle editing fields on the webform
	elseif ( $form_id == 'webform_component_edit_form' ) {
 		// if the user has specified the SalesForce action, then we will be posting the form to SalesForce
		if ( !empty($form['#parameters'][1]->use_salesforce) ) {
	    include_once(drupal_get_path('module', 'salesforcewebform') . "/salesforcewebform_fields.inc");
		  foreach($salesforcewebform_available_fields as $sfwafkey=>$sfwafvalue) {
			$sfwafkey = strtolower($sfwafkey);
			$sfwaf_array[$sfwafkey] = $sfwafvalue;
		  }
		  $valid_fields = array_merge($sfwaf_array, salesforcewebform_load_custom_fields('webform'));
		  $new_form_key = array(
				'#type' => 'select',
				'#title' => t('SalesForce Field Key'),
				'#multiple' => FALSE,
				'#options' => $valid_fields,
				'#description' => t('Select a SalesForce field that this form field will map to.  If you switch the form to an email for this will be used as the machine readable key.'),
				'#weight' => $form['field']['form_key']['#weight'],
				'#default_value' => empty($form['#parameters'][2]['form_key']) ? '' : $form['#parameters'][2]['form_key'],
		  ); 
		  $form['advanced']['form_key'] = $new_form_key;
		  $form['advanced']['#collapsed'] = FALSE;
		}
	}
 }

/**
 * Intercept operations on the webform node to assure that the SalesForce fields are tracked.
 */
function salesforcewebform_nodeapi(&$node, $op, $form = NULL, $page = NULL) {	
	if ( $node->type == 'webform') {

		switch ($op) {
			case 'insert':
			case 'update':
				if ( !empty($node->use_salesforce) ) {
					// store the SalesForce fields
					$result = db_query("DELETE FROM {salesforcewebform} where `vid` = %d", $node->vid);
					$result = db_query("INSERT INTO {salesforcewebform} (`vid`, `use`) " .
    					 							 "VALUES (%d, %d)", $node->vid, $node->use_salesforce);
				}
				break;
			case 'validate':

				break;	
			case 'load':
				$result = db_query("SELECT `use` from {salesforcewebform} ".
			           					 "WHERE `vid` = %d", $node->vid); 
				// either $result has 0 or 1 rows, if we have one then add it to the node
				$row = db_fetch_array($result);

			  if ( $row['use'] == '1' ) {
					$node->use_salesforce = TRUE;
				}
				else {
					$node->use_salesforce = FALSE;
				}
				break;
		}
	}
}

/**
 * Add menu item for administering the module.
 */
function salesforcewebform_menu() {
	$items[] = array(
		'path' => 'admin/settings/salesforcewebform',
		'title' => t('SalesForce Webform'),
		'description' => t('Configure SalesForce webform integration'),
		'callback' => 'drupal_get_form',
		'callback arguments' => array('salesforcewebform_admin_settings'),
		'access' => user_access('access administration pages'),
		'type' => MENU_NORMAL_ITEM
	);
	return $items;
}

function salesforcewebform_admin_settings() {
	$form['field_settings'] = array(
		'#type' => 'fieldset',
		'#title' => t('SalesForce custom field settings'),
		'#description' => t('Allows you to configure your custom field settings to show in the field selection for SalesForce webforms'),
	);
	$form['field_settings']['salesforcewebform_custom_fields'] = array(
    '#type' => 'textarea',
    '#title' => t("Custom Fields"),
    '#default_value' => create_custom_field_spec(variable_get('salesforcewebform_custom_fields', null)),
    '#description' => t('A list of additional fields configured for leads on your instances of SalesForce. One field per line, with field name and description seperated by pipes. i.e. safe_key|Some readable option'),
    '#rows' => 5,
    '#weight' => -2,
  );
	$form['login']['salesforcewebform_user'] = array(
	    '#type' => 'textfield',
	    '#title' => t('SalesForce User'),
	    '#description' => t('The user on the SalesForce System that will post the data to SalesForce.'),
	);
	
	$form['login']['salesforcewebform_pw'] = array(
	    '#type' => 'password',
	    '#title' => t('SalesForce Password'),
	    '#description' => t('The password of the user on the SalesForce System the form uses to connect.  Note: the password must be entered as mypasswordXXXXXXXXX, where XXXXXXXXX is your API Security Token from SalesForce.  Additionally, your password will not be displayed here once it is entered, for security purposes.  If you need to change it, please re-enter it.'),
	); 
	$form['login']['salesforcewebform_change_login'] = array(
    '#type' => 'checkbox',
    '#title' => t('Change Login Information'),
    '#description' => t('Check this to override the current login information with the entered values.')
  );
	$form['#validate'] = array ('parse_custom_field_spec' => $form);
	return system_settings_form($form); 
}

function parse_custom_field_spec ($form_id, $form_values, $form) {
	$custom_fields = array();
	$custom_field_spec = $form_values['salesforcewebform_custom_fields'];
	if ( !empty($custom_field_spec) ) {
		$custom_field_tmp = explode("\n", $custom_field_spec);
		foreach ( $custom_field_tmp as $field ) {
			if ( empty($field) ) break ;
			$new_field = explode("|", $field);
			$custom_fields[$new_field[0]] = $new_field[1];
		}
	}
	if ( $form_values['salesforcewebform_change_login'] === 0 ) {
    form_set_value($form['login']['salesforcewebform_user'], variable_get('salesforcewebform_user', NULL));
    form_set_value($form['login']['salesforcewebform_pw'], variable_get('salesforcewebform_pw', NULL));
  }
	form_set_value($form['field_settings']['salesforcewebform_custom_fields'], $custom_fields);
}

function create_custom_field_spec ($custom_fields) {
	if ( empty($custom_fields) ) {
		return "";
	} 
	
	$spec = "";
	foreach ( array_keys($custom_fields) as $field ) {
		$field_string = $field . "|" . $custom_fields[$field] . "\n";
		$spec .= $field_string;
	}
	return $spec;
}

function salesforcewebform_process($form_id, $form_values) {

	//Ok, now use SOAP to send the information to SalesForce
	require_once (drupal_get_path('module', 'salesforcewebform') . '/includes/soapclient/SforcePartnerClient.php');
	require_once (drupal_get_path('module', 'salesforcewebform') . '/includes/soapclient/SforceHeaderOptions.php');
	include_once(drupal_get_path('module', 'salesforcewebform') . "/salesforcewebform_fields.inc");
	
	// Salesforce Login information
	$wsdl = drupal_get_path('module', 'salesforcewebform') . '/includes/soapclient/partner.wsdl.xml';
	$userName = variable_get('salesforcewebform_user', NULL);
	$password = variable_get('salesforcewebform_pw', NULL);
	
	// Process of logging on and getting a salesforce.com session
	$client = new SforcePartnerClient();
	$client->createConnection($wsdl);
	$loginResult = $client->login($userName, $password);

	$all_fields = array();
	$master_fields = array_merge($salesforcewebform_available_fields, salesforcewebform_load_custom_fields(NULL));
	$submission = array();
	foreach($master_fields as $mkey => $mvalue) {
		if(array_key_exists(strtolower($mkey), $form_values['submitted_tree'])) {
			$submission[$mkey] = $form_values['submitted_tree'][strtolower($mkey)];
		}
  }

  $sid = empty($form_values['submitted_tree']['WebformSID__c']) ? _salesforcewebform_generate_sid() : $form_values['submitted_tree']['WebformSID__c'];
  $all_fields['OWNERID'] = $client->userId;
  $submitted = $form_values['submitted'];
  
  foreach($submission as $keyid=>$keyval) {
    foreach($submitted as $skeyid=>$skeyval) {
    	if($keyval == $skeyval && $keyid == "WebformSID__c") {
      $websidkey = $skeyid;
    	}
    }
  }

  $all_fields['WebformSID__c'] = empty($submission['webformsid__c']) ? $form_values['details']['nid']."-".$sid : $submission['webformsid__c'];
  $form_values['submitted_tree']['WebformSID__c'] = $all_fields['WebformSID__c'];
  $form_values['submitted'][$websidkey] = $all_fields['WebformSID__c'];
  if(isset($form_values['submission'])) {
    $form_values['submission']->data[$websidkey]['value'][0] = $all_fields['WebformSID__c']; 
  }
  foreach($submission as $fkey=>$fvalue) {
    if((!in_array($fkey, array('DoNotCall', 'HasOptedOutOfEmail', 'HasOptedOutOfFax', 'submitted', 'submission', 'details', 'op', 'submit', 'form_id', 'form_token', 'submitted_tree', 'WebformSID__c'))  && !is_numeric($fkey)) && $fvalue) {
      if(!is_array($fvalue)) {
        $all_fields[$fkey] = htmlspecialchars(stripslashes(strip_tags($fvalue)));
      }
      else {
        $fsubs = "";
        foreach($fvalue as $subkey=>$subvalue) {
          $fsubs .= $subvalue.";";
        }
        $all_fields[$fkey] = $fsubs;
      }
    }
	}

  $sObjects = array();

  $sObject = new sObject();
  $sObject->type = 'Lead'; // Salesforce Table or object that you will perform the upsert on
  $sObject->fields = $all_fields;
  array_push($sObjects, $sObject);

  //This passes the client = the login to sales force
  // the $sObjects = data to upsert
  // $file_updated = accounts which are updated
  // $file_created = accounts which are inserted
  // $file_failed =  accounts which failed
  $success = _salesforcewebform_upsert_accounts($client, $sObjects, $file_updated, $file_created, $file_failed);
  // Update the overall counts
  if (is_array($success))
  {
      $accounts_created = $accounts_created + $success[0];
      $accounts_updated = $accounts_updated + $success[1];
      $accounts_failed =  $accounts_failed + $success[2];
  }
  $total_record_count = $total_record_count + $record_count;

  $form_values['submitted_tree']['webformsid__c'] = $form_values['submitted_tree']['WebformSID__c'];
  unset($form_values['submitted_tree']['WebformSID__c']);
  
  return $form_values;
}

function _salesforcewebform_upsert_accounts($client, $sObjects, $file_updated, $file_created, $file_failed)
{
    $accounts_created = 0;
    $accounts_updated = 0;
    $accounts_failed = 0;
    try
    {
        // The upsert process
        $results = $client->upsert("WebformSID__c", $sObjects);
        $k = 0;

        // This loop processes $result to build the log files
        foreach ($results as $result)
        {
            // Build string from fields in $sObjects array
            // At this point, the record has already been upserted
            // We just need the data for the log file
            // The string is the same, regardless of the result
            $data2 = $sObjects[$k]->fields['NAME'] . ", " . $sObjects[$k]->fields[
                'SA_ID__C'];

            if ($result->success)
            {
                if ($result->created)
                {
                    $accounts_created++;
                   // file_put_contents($file_created, $data2 . "\n", FILE_APPEND);
                }
                else
                {
                    $accounts_updated++;
                   // file_put_contents($file_updated, $data2 . "\n", FILE_APPEND);
                }
            }
            else
            {
                $accounts_failed++;
                // The errors object also contains fields and status_code
                $errMessage = $result->errors->message;
               // file_put_contents($file_failed, $data2 . ", " . $errMessage . "\n", FILE_APPEND);
            }
            $k++;
        }
        // Put the result counts into an array to pass back as the result.
        $success = array();
        array_push($success, $accounts_created, $accounts_updated, $accounts_failed);
        return $success;
    }
    catch (exception $e)
    {
        // This is reached if there is a major problem in the data or with
        // the salesforce.com connection. Normal data errors are caught by
        // salesforce.com
         return $e;
    }
}

function _salesforcewebform_generate_sid() {
  $sid = md5(uniqid(rand(), true));
  return substr($sid, 0, 8);
}

